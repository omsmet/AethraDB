//package AethraDB.benchmarks.tpch.q1_no_sort_hard_coded;
//
//import org.apache.spark.SparkContext;
//import org.apache.spark.SparkEnv;
//import org.apache.spark.memory.TaskMemoryManager;
//import org.apache.spark.sql.SparkSession;
//import org.apache.spark.sql.catalyst.InternalRow;
//import org.apache.spark.sql.catalyst.expressions.RowBasedKeyValueBatch;
//import org.apache.spark.sql.catalyst.expressions.UnsafeProjection;
//import org.apache.spark.sql.catalyst.expressions.UnsafeRow;
//import org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter;
//import org.apache.spark.sql.types.DataTypes;
//import org.apache.spark.sql.types.Metadata;
//import org.apache.spark.sql.types.StructField;
//import org.apache.spark.sql.types.StructType;
//import org.apache.spark.unsafe.KVIterator;
//import org.apache.spark.unsafe.Platform;
//
///**
// * Simplified version of the hashAgg_FashHashMap_0 which is generated by Spark for TPC-H Q1.
// * Used to assess the performance of our own generated maps.
// * Observe: this implementation *should* be more performant than the actual Spark implementation
// * since many checks have been removed, and code paths have been simplified significantly.
// */
//public final class SparkAggregationMap {
//
//    private hashAgg_FastHashMap_0 internalMap;
//    private final SparkContext sparkContext;
//    private final TaskMemoryManager mapMemoryManager;
//    private final UnsafeRow emptyRow;
//    private StructType keySchemaTerm;
//    private StructType valueSchemaTerm;
//    private final UnsafeProjection valueProjection;
//
//    public SparkAggregationMap() {
//        sparkContext = SparkSession.builder().master("local[1]").getOrCreate().sparkContext();
//        SparkEnv env = sparkContext.createSparkEnv(sparkContext.conf(), true, sparkContext.listenerBus());
//        mapMemoryManager = new TaskMemoryManager(env.memoryManager(), 0L);
//
//        UnsafeRowWriter emptyRowWriter = new UnsafeRowWriter(11, 16 * 8);
//        emptyRowWriter.reset();
//        emptyRowWriter.zeroOutNullBytes();
//        emptyRowWriter.write(0, 0d);
//        emptyRowWriter.write(1, 0d);
//        emptyRowWriter.write(2, 0d);
//        emptyRowWriter.write(3, 0d);
//        emptyRowWriter.write(4, 0d);
//        emptyRowWriter.write(5, 0L);
//        emptyRowWriter.write(6, 0d);
//        emptyRowWriter.write(7, 0L);
//        emptyRowWriter.write(8, 0d);
//        emptyRowWriter.write(9, 0L);
//        emptyRowWriter.write(10, 0L);
//        emptyRow = emptyRowWriter.getRow();
//
//        keySchemaTerm = new StructType();
//        keySchemaTerm = keySchemaTerm.add(new StructField("hashAgg_key_0", DataTypes.ByteType, false, Metadata.empty()));
//        keySchemaTerm = keySchemaTerm.add(new StructField("hashAgg_key_1", DataTypes.ByteType, false, Metadata.empty()));
//
//        valueSchemaTerm = new StructType();
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("sum_qty", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("sum_base_price", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("sum_disc_price", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("sum_charge", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_qty_sum", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_qty_count", DataTypes.LongType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_price_sum", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_price_count", DataTypes.LongType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_disc_sum", DataTypes.DoubleType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("avg_disc_count", DataTypes.LongType, false, Metadata.empty()));
//        valueSchemaTerm = valueSchemaTerm.add(new StructField("count_order", DataTypes.LongType, false, Metadata.empty()));
//
//        valueProjection = UnsafeProjection.create(valueSchemaTerm);
//
//        this.internalMap = new hashAgg_FastHashMap_0(mapMemoryManager, emptyRow, keySchemaTerm, valueSchemaTerm, valueProjection);
//    }
//
//    public static final class hashAgg_FastHashMap_0 {
//        private final RowBasedKeyValueBatch batch;
//        private final int[] buckets;
//        private final int capacity = 1 << 16;
//        private final double loadFactor = 0.5;
//        private final int numBuckets = (int) (capacity / loadFactor);
//        private int numRows = 0;
//        private final Object emptyVBase;
//        private final long emptyVOff;
//        private final int emptyVLen;
//        private boolean isBatchFull = false;
//        private final UnsafeRowWriter agg_rowWriter;
//
//        public hashAgg_FastHashMap_0(
//                TaskMemoryManager taskMemoryManager,
//                UnsafeRow emptyAggregationBuffer,
//                StructType keySchemaTerm,
//                StructType valueSchemaTerm,
//                UnsafeProjection valueProjection) {
//            batch = RowBasedKeyValueBatch.allocate(keySchemaTerm, valueSchemaTerm, taskMemoryManager, capacity);
//
//            final byte[] emptyBuffer = valueProjection.apply(emptyAggregationBuffer).getBytes();
//
//            emptyVBase = emptyBuffer;
//            emptyVOff = Platform.BYTE_ARRAY_OFFSET;
//            emptyVLen = emptyBuffer.length;
//
//            agg_rowWriter = new UnsafeRowWriter(2, 64);
//
//            buckets = new int[numBuckets];
//            java.util.Arrays.fill(buckets, -1);
//        }
//
//        public UnsafeRow findOrInsert(byte hashAgg_key_0, byte hashAgg_key_1) {
//            long h = hash(hashAgg_key_0, hashAgg_key_1);
//            int step = 0;
//            int idx = (int) h & (numBuckets - 1);
//            int maxSteps = 2;
//            while (step < maxSteps) {
//                // Return bucket index if it's either an empty slot or already contains the key
//                if (buckets[idx] == -1) {
//                    if (numRows < capacity && !isBatchFull) {
//                        agg_rowWriter.reset();
//                        agg_rowWriter.zeroOutNullBytes();
//                        agg_rowWriter.write(0, hashAgg_key_0);
//                        agg_rowWriter.write(1, hashAgg_key_1);
//                        UnsafeRow agg_result = agg_rowWriter.getRow();
//                        Object kbase = agg_result.getBaseObject();
//                        long koff = agg_result.getBaseOffset();
//                        int klen = agg_result.getSizeInBytes();
//
//                        UnsafeRow vRow = batch.appendRow(kbase, koff, klen, emptyVBase, emptyVOff, emptyVLen);
//                        if (vRow == null) {
//                            isBatchFull = true;
//                        } else {
//                            buckets[idx] = numRows++;
//                        }
//                        return vRow;
//                    } else {
//                        // No more space
//                        return null;
//                    }
//                } else if (equals(idx, hashAgg_key_0, hashAgg_key_1)) {
//                    return batch.getValueRow(buckets[idx]);
//                }
//                idx = (idx + 1) & (numBuckets - 1);
//                step++;
//            }
//            // Didn't find it
//            return null;
//        }
//
//        private boolean equals(int idx, byte hashAgg_key_0, byte hashAgg_key_1) {
//            UnsafeRow row = batch.getKeyRow(buckets[idx]);
//            byte rowFirstKeyOrdinal = row.getByte(0);
//            byte rowSecondKeyOrdinal = row.getByte(1);
//            return (rowFirstKeyOrdinal == hashAgg_key_0) && (rowSecondKeyOrdinal == hashAgg_key_1);
//        }
//
//        private long hash(byte hashAgg_key_0, byte hashAgg_key_1) {
//            long hashAgg_hash_0 = 0;
//
//            int hashAgg_result_0 = 0;
//            hashAgg_result_0 = (hashAgg_result_0 ^ (0x9e3779b9)) + hashAgg_key_0;
//
//            hashAgg_hash_0 = (hashAgg_hash_0 ^ (0x9e3779b9)) + hashAgg_result_0;
//
//            int hashAgg_result_1 = 0;
//            hashAgg_result_1 = (hashAgg_result_1 ^ (0x9e3779b9)) + hashAgg_key_1;
//
//            hashAgg_hash_0 = (hashAgg_hash_0 ^ (0x9e3779b9)) + hashAgg_result_1 + (hashAgg_hash_0 << 6) + (hashAgg_hash_0 >>> 2);
//
//            return hashAgg_hash_0;
//        }
//
//        public KVIterator<UnsafeRow, UnsafeRow> rowIterator() {
//            return batch.rowIterator();
//        }
//
//        public void close() {
//            batch.close();
//        }
//
//    }
//
//    /**
//     * Perform update of the hash-table for a given key
//     * @param hashAgg_expr_0_0 l_quantity
//     * @param hashAgg_expr_1_0 l_extendedprice
//     * @param hashAgg_expr_2_0 l_discount
//     * @param hashAgg_expr_3_0 l_tax
//     * @param hashAgg_expr_4_0 l_returnflag
//     * @param hashAgg_expr_5_0 l_linestatus
//     */
//    public void hashAgg_doConsume_0(double hashAgg_expr_0_0, double hashAgg_expr_1_0, double hashAgg_expr_2_0, double hashAgg_expr_3_0, byte hashAgg_expr_4_0, byte hashAgg_expr_5_0) {
//        // Get the hash-table row from the fast map
//        UnsafeRow hashTableRow = this.internalMap.findOrInsert(hashAgg_expr_4_0, hashAgg_expr_5_0);
//
//        // Perform computation of common sub-expressions
//        double hashAgg_value_34 = 1.0D - hashAgg_expr_2_0; // 1 - l_discount
//        double hashAgg_value_32 = hashAgg_expr_1_0 * hashAgg_value_34; // l_extendedprice * (1 - l_discount)
//
//        // evaluate aggregate functions and update aggregation buffers
//        hashAgg_doAggregate_sum_0(hashTableRow, hashAgg_expr_0_0);
//        hashAgg_doAggregate_sum_1(hashAgg_expr_1_0, hashTableRow);
//        hashAgg_doAggregate_sum_2(hashTableRow, hashAgg_value_32);
//        hashAgg_doAggregate_sum_3(hashAgg_expr_3_0, hashTableRow, hashAgg_value_32);
//        hashAgg_doAggregate_avg_0(hashTableRow, hashAgg_expr_0_0);
//        hashAgg_doAggregate_avg_1(hashAgg_expr_1_0, hashTableRow);
//        hashAgg_doAggregate_avg_2(hashAgg_expr_2_0, hashTableRow);
//        hashAgg_doAggregate_count_0(hashTableRow);
//
//    }
//
//    public KVIterator<UnsafeRow, UnsafeRow> resultIterator() {
//        return this.internalMap.rowIterator();
//    }
//
//    public void reset() {
//        this.internalMap.close();
//        this.internalMap = new hashAgg_FastHashMap_0(mapMemoryManager, emptyRow, keySchemaTerm, valueSchemaTerm, valueProjection);
//    }
//
//    public void stop() {
//        this.internalMap.close();
//        this.sparkContext.stop();
//    }
//
//    private void hashAgg_doAggregate_sum_1(double hashAgg_expr_1_0, InternalRow hashAgg_unsafeRowAggBuffer_0) {
//        double currentValue = hashAgg_unsafeRowAggBuffer_0.getDouble(1);
//        double updatedValue = currentValue + hashAgg_expr_1_0;
//        hashAgg_unsafeRowAggBuffer_0.setDouble(1, updatedValue);
//    }
//
//    private void hashAgg_doAggregate_avg_0(InternalRow hashAgg_unsafeRowAggBuffer_0, double hashAgg_expr_0_0) {
//        double currentSumValue = hashAgg_unsafeRowAggBuffer_0.getDouble(4);
//        double updatedSumValue = currentSumValue + hashAgg_expr_0_0;
//
//        long currentCountValue = hashAgg_unsafeRowAggBuffer_0.getLong(5);
//        long updatedCountValue = currentCountValue + 1L;
//
//        hashAgg_unsafeRowAggBuffer_0.setDouble(4, updatedSumValue);
//        hashAgg_unsafeRowAggBuffer_0.setLong(5, updatedCountValue);
//    }
//
//    private void hashAgg_doAggregate_sum_3(double hashAgg_expr_3_0, InternalRow hashAgg_unsafeRowAggBuffer_0, double hashAgg_value_32) {
//        double currentValue = hashAgg_unsafeRowAggBuffer_0.getDouble(3);
//        double delta = (1.0D + hashAgg_expr_3_0) * hashAgg_value_32;
//        double updatedValue = currentValue + delta;
//        hashAgg_unsafeRowAggBuffer_0.setDouble(3, updatedValue);
//    }
//
//    private void hashAgg_doAggregate_avg_2(double hashAgg_expr_2_0, InternalRow hashAgg_unsafeRowAggBuffer_0) {
//        double currentSumValue = hashAgg_unsafeRowAggBuffer_0.getDouble(8);
//        double updatedSumValue = currentSumValue + hashAgg_expr_2_0;
//
//        long currentCountValue = hashAgg_unsafeRowAggBuffer_0.getLong(9);
//        long updatedCountValue = currentCountValue + 1L;
//
//        hashAgg_unsafeRowAggBuffer_0.setDouble(8, updatedSumValue);
//        hashAgg_unsafeRowAggBuffer_0.setLong(9, updatedCountValue);
//    }
//
//    private void hashAgg_doAggregate_sum_0(InternalRow hashAgg_unsafeRowAggBuffer_0, double hashAgg_expr_0_0) {
//        double currentValue = hashAgg_unsafeRowAggBuffer_0.getDouble(0);
//        double updatedValue = currentValue + hashAgg_expr_0_0;
//        hashAgg_unsafeRowAggBuffer_0.setDouble(0, updatedValue);
//    }
//
//    private void hashAgg_doAggregate_count_0(InternalRow hashAgg_unsafeRowAggBuffer_0) {
//        long currentValue = hashAgg_unsafeRowAggBuffer_0.getLong(10);
//        long updatedValue = currentValue + 1L;
//        hashAgg_unsafeRowAggBuffer_0.setLong(10, updatedValue);
//    }
//
//    private void hashAgg_doAggregate_sum_2(InternalRow hashAgg_unsafeRowAggBuffer_0, double hashAgg_value_32) {
//        double currentValue = hashAgg_unsafeRowAggBuffer_0.getDouble(2);
//        double updatedValue = currentValue + hashAgg_value_32;
//        hashAgg_unsafeRowAggBuffer_0.setDouble(2, updatedValue);
//    }
//
//    private void hashAgg_doAggregate_avg_1(double hashAgg_expr_1_0, InternalRow hashAgg_unsafeRowAggBuffer_0) {
//        double currentSumValue = hashAgg_unsafeRowAggBuffer_0.getDouble(6);
//        double updatedSumValue = currentSumValue + hashAgg_expr_1_0;
//
//        long currentCountValue = hashAgg_unsafeRowAggBuffer_0.getLong(7);
//        long updatedCountValue = currentCountValue + 1L;
//
//        hashAgg_unsafeRowAggBuffer_0.setDouble(6, updatedSumValue);
//        hashAgg_unsafeRowAggBuffer_0.setLong(7, updatedCountValue);
//    }
//
//}
